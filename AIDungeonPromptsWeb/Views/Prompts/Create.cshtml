@model CreatePromptViewModel
@{ ViewData["Title"] = "Create"; }
@if (Model.Command.ParentId.HasValue)
{
	<div class="alert alert-primary">
		You are creating a sub scenario. <a asp-action="Edit" asp-route-id="@Model.Command.ParentId">Click here to return to the parent without saving.</a>
	</div>
}
@if (!string.IsNullOrWhiteSpace(Model.Command.NovelAiScenario))
{
	<div class="alert alert-success">
		NAI Import Successful!
	</div>
}
<h2>Create Prompt</h2>
<br/>
@if (Model.CreationDisabled)
{
	<h3>Sorry, prompt creation is temporarily disabled</h3>
	<p>@Model.DisabledMessage</p>
}
else
{
	<form enctype="multipart/form-data" method="post">
		<div class="d-flex mb-3">
			<div>
				<input type="file" name="scenarioFile"/>
			</div>
			<div class="ml-auto">
				<button class="btn btn-outline-light">Upload NAI Scenario</button>
			</div>
		</div>
	</form>
	<form asp-controller="Prompts" asp-action="Create" enctype="multipart/form-data" method="post">
		<input class="honey" name="Honey"/>
		@Html.HiddenFor(e => e.Command.ParentId)
		@Html.HiddenFor(e => e.Command.NovelAiScenario)
		<div class="form-group required">
			@Html.LabelFor(m => m.Command.Title)
			<input asp-for="Command.Title" class="form-control"/>
			<span class="invalid-feedback" asp-validation-for="Command.Title"></span>
		</div>
		@if (!Model.Command.ParentId.HasValue)
		{
			<div class="form-group">
				@Html.LabelFor(m => m.Command.Description)
				<textarea asp-for="Command.Description" class="form-control"></textarea>
				<span class="invalid-feedback" asp-validation-for="Command.Description"></span>
			</div>
		}
		<div class="form-group required">
			@Html.LabelFor(m => m.Command.PromptContent)
			<textarea asp-for="Command.PromptContent" class="form-control"></textarea>
			<span class="invalid-feedback" asp-validation-for="Command.PromptContent"></span>
		</div>
		@if (!Model.Command.ParentId.HasValue)
		{
			<div class="form-group required">
				@Html.LabelFor(m => m.Command.PromptTags)
				<input asp-for="Command.PromptTags" class="form-control"/>
				<span class="invalid-feedback" asp-validation-for="Command.PromptTags"></span>
			</div>
		}
		<div class="form-group">
			@Html.LabelFor(m => m.Command.Memory)
			<textarea asp-for="Command.Memory" class="form-control"></textarea>
			<span class="invalid-feedback" asp-validation-for="Command.Memory"></span>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Command.Quests)
			<textarea asp-for="Command.Quests" class="form-control"></textarea>
			<span class="invalid-feedback" asp-validation-for="Command.Quests"></span>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Command.AuthorsNote)
			<textarea asp-for="Command.AuthorsNote" class="form-control"></textarea>
			<span class="invalid-feedback" asp-validation-for="Command.AuthorsNote"></span>
		</div>
		@if (!Model.Command.ParentId.HasValue)
		{
			<div class="form-check">
				<input asp-for="Command.Nsfw" class="form-check-input">
				@Html.LabelFor(m => m.Command.Nsfw, new {@class = "form-check-label"})
			</div>
		}
		<br/>
		<div>
			<h4>Script Zip</h4>
			<input type="file" asp-for="ScriptZip"/>
			<span class="invalid-feedback" asp-validation-for="Command.ScriptZip"></span>
		</div>
		<br/>
		<div class="card">
			<div aria-expanded="true" aria-controls="world-info-body" data-toggle="collapse" data-target="#world-info-body" class="card-header">
				<h4>World Info</h4>
			</div>
			<div id="world-info-body" class="collapse show card-body">
				<div>
					<div>
						<input type="file" asp-for="WorldInfoFile"/>
					</div>
					<div class="mt-3">
						<button id="upload-wi" asp-route-uploadWi="@true" asp-fragment="upload-wi" class="btn btn-secondary">Upload JSON</button>
					</div>
					<br/>
					<p>Any World Info left blank will be automatically removed on submission.</p>
					@Html.EditorFor(m => m.Command.WorldInfos)
					<button id="add-wi" asp-route-addWi="@true" asp-fragment="add-wi" class="btn btn-secondary">Add Another</button>
				</div>
			</div>
		</div>
		<br/>
		<div class="card">
			<div aria-expanded="true" aria-controls="sub-scenario-body" data-toggle="collapse" data-target="#sub-scenario-body" class="card-header">
				<h4>Sub Scenarios</h4>
			</div>
			<div id="sub-scenario-body" class="collapse show card-body">
				<button id="add-sub-scenario" asp-route-addChild="@true" class="btn btn-secondary">Add Scenario</button>
			</div>
		</div>
		<br/>
		@{
			var showDraftButton = !Model.Command.ParentId.HasValue;
		}
		@if (Model.SimilarPromptQuery.Matched)
		{
			<div class="alert alert-warning" role="alert">
				<p>
					There already @(Model.SimilarPromptQuery.SimilarPrompts.Count == 1 ? "exists a prompt" : "exist prompts") with the same title:
					<br/>
					@for (var i = 0; i < Model.SimilarPromptQuery.SimilarPrompts.Count; i++)
					{
						var prompt = Model.SimilarPromptQuery.SimilarPrompts[i];
						<a asp-action="View" asp-controller="Prompts" asp-route-id="@prompt.Id" target="_blank">@prompt.Title</a>
						if (i == Model.SimilarPromptQuery.SimilarPrompts.Count - 1)
						{
							continue;
						}
						<span>, </span>
					}
					<br/>
					Please confirm this isn't a duplicate before creating a new prompt.
				</p>
			</div>
		}
		<div class="d-flex">
			@if (showDraftButton)
			{
				<button id="save-draft" type="submit" asp-route-saveDraft="@true" class="ml-auto btn btn-lg btn-outline-warning">Save Draft</button>
			}
			<button autofocus="@Model.SimilarPromptQuery.Matched" asp-route-confirm="@Model.SimilarPromptQuery.Matched" type="submit" asp-fragment="@(Model.Command.ParentId.HasValue ? "sub-scenarios" : string.Empty)" class="@(!showDraftButton ? "ml-auto" : string.Empty) ml-3 btn btn-lg btn-primary">
				@(Model.Command.ParentId.HasValue ? "Save" : "Submit")
			</button>
		</div>
	</form>

@section Scripts {
	<partial name="_ValidationScriptsPartial.cshtml"/>
	<script src="~/js/prompts/create.js" asp-append-version="true"></script>
}
}
