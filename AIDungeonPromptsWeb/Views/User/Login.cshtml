@model LogInModel

@if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Count > 0)
{
	<div class="alert alert-danger alert-dismissible fade show" role="alert">
		@foreach (var modelError in Html.ViewData.ModelState.SelectMany(keyValuePair => keyValuePair.Value.Errors))
		{
			<span>@modelError.ErrorMessage</span>
		}
		<button type="button" class="close" data-dismiss="alert" aria-label="Close">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
}
<form asp-action="LogIn" method="post">
	@Html.HiddenFor(m => m.ReturnUrl)
	<input class="honey" name="Honey" />
	<div class="form-group required">
		@Html.LabelFor(m => m.LogInQuery.Username)
		<input asp-for="LogInQuery.Username" class="form-control" />
		<span class="invalid-feedback" asp-validation-for="LogInQuery.Username"></span>
	</div>
	<div class="form-group required">
		@Html.LabelFor(m => m.LogInQuery.Password)
		<input type="password" asp-for="LogInQuery.Password" class="form-control" />
		<span class="invalid-feedback" asp-validation-for="LogInQuery.Password"></span>
	</div>
	<div class="d-flex flex-row-reverse">
		<button type="submit" class="btn btn-lg btn-primary">Submit</button>
	</div>
</form>
